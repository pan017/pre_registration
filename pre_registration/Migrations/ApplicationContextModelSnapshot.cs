// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using pre_registration.Models;
using System;

namespace pre_registration.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("pre_registration.Models.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AreaId");

                    b.Property<string>("Login");

                    b.Property<string>("Password");

                    b.Property<int?>("RoleId");

                    b.Property<int>("UserDataID");

                    b.Property<int?>("UserSettingsId");

                    b.Property<string>("confirmKey");

                    b.Property<bool>("confirmedEmail");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserDataID");

                    b.HasIndex("UserSettingsId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("pre_registration.Models.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adres")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("NotificationEmail")
                        .IsRequired();

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.Property<string>("WorkTime")
                        .IsRequired();

                    b.Property<string>("email")
                        .IsRequired();

                    b.Property<string>("website")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("pre_registration.Models.Client", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("UserDataID");

                    b.Property<int?>("UserId");

                    b.HasKey("id");

                    b.HasIndex("UserDataID");

                    b.HasIndex("UserId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("pre_registration.Models.CuponDate", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AreaId");

                    b.Property<DateTime>("date");

                    b.HasKey("id");

                    b.HasIndex("AreaId");

                    b.ToTable("CuponDates");
                });

            modelBuilder.Entity("pre_registration.Models.DataBaseModel.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("pre_registration.Models.DataBaseModel.DeniedCupon", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DeniedKey");

                    b.Property<int>("OrderId");

                    b.HasKey("id");

                    b.HasIndex("OrderId");

                    b.ToTable("DeniedCupons");
                });

            modelBuilder.Entity("pre_registration.Models.DataBaseModel.Order", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<string>("Comment");

                    b.Property<int>("CuponDateId");

                    b.Property<DateTime>("OrderDate");

                    b.HasKey("id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CuponDateId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("pre_registration.Models.DataBaseModel.UserSettings", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("SendEmail");

                    b.Property<bool>("SendReminder");

                    b.HasKey("id");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("pre_registration.Models.Denied", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CuponDateid");

                    b.Property<int?>("UserId");

                    b.Property<DateTime>("deniedDate");

                    b.Property<string>("reason");

                    b.HasKey("id");

                    b.HasIndex("CuponDateid");

                    b.HasIndex("UserId");

                    b.ToTable("Denied");
                });

            modelBuilder.Entity("pre_registration.Models.UserData", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EmailAdress")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.Property<string>("SecondName")
                        .IsRequired();

                    b.HasKey("id");

                    b.ToTable("UsersData");
                });

            modelBuilder.Entity("pre_registration.Models.ApplicationUser", b =>
                {
                    b.HasOne("pre_registration.Models.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId");

                    b.HasOne("pre_registration.Models.DataBaseModel.ApplicationRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.HasOne("pre_registration.Models.UserData", "UserData")
                        .WithMany()
                        .HasForeignKey("UserDataID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("pre_registration.Models.DataBaseModel.UserSettings", "UserSettings")
                        .WithMany()
                        .HasForeignKey("UserSettingsId");
                });

            modelBuilder.Entity("pre_registration.Models.Client", b =>
                {
                    b.HasOne("pre_registration.Models.UserData", "UserData")
                        .WithMany()
                        .HasForeignKey("UserDataID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("pre_registration.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("pre_registration.Models.CuponDate", b =>
                {
                    b.HasOne("pre_registration.Models.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("pre_registration.Models.DataBaseModel.DeniedCupon", b =>
                {
                    b.HasOne("pre_registration.Models.DataBaseModel.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("pre_registration.Models.DataBaseModel.Order", b =>
                {
                    b.HasOne("pre_registration.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("pre_registration.Models.CuponDate", "CuponDate")
                        .WithMany()
                        .HasForeignKey("CuponDateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("pre_registration.Models.Denied", b =>
                {
                    b.HasOne("pre_registration.Models.CuponDate", "CuponDate")
                        .WithMany()
                        .HasForeignKey("CuponDateid");

                    b.HasOne("pre_registration.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
